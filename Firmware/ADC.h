//  ADC.h
//  Заголовочный код драйвера ADC - внутренний АЦП МК. Версия 1.0 от 28 апреля 2011 года.
//  Поддерживает все МК AVR с достаточным количеством выводов(по умолчанию частота МК - 14745600 Гц).
//  Разработчик: Евгений belmel@tut.by

// Подключаем заголовочные файлы
#include "BSP.h"

/// Указываем, что используется драйвер ADC
#ifndef __ADC_DRIVER_H
  #define __ADC_DRIVER_H

/// <summary>
/// Временная задержка 1 мс. 
/// Макрос рассчитывает число машиных циклов, необходимое для данной задержки.
/// </summary>  
/// <param name="f">тактовая частота процессора в герцах</param>
/// <param name="t">время задержки в микросекундах</param> 
//------- Каналы АЦП ----------------
#define   ADC_IN1     0x00 
#define   ADC_IN2     0x01 
#define   ADC_IN3     0x02 
#define   ADC_IN4     0x03 
#define   ADC_IN5     0x04 
#define   ADC_IN6     0x05 
#define   ADC_IN7     0x06 
#define   ADC_IN8     0x07 

//--- Константы для Источника опорного напряжения ----
/// Внешний ИОН
#define ADC_AREF   0
/// Внутренний ИОН 5В
#define ADC_AVCC   1
/// Внутренний ИОН 2.56В
#define ADC_2_56V  3

/// Внутренний ИОН 1.1В для корректировки
#define ADC_CORRECT_REF  225  // Значение после АЦП - (1.1*1023)/ИОН

/// коэффициент делителя перед АЦП
#define ADC_MULTY_RESIST_DIVIDER  11
#define ADC_PLUS_RESIST_DIVIDER  10
//-------------------------------------------------------------------------------------
/// <summary>
/// Функция инициализации внутреннего АЦП.
/// </summary>
/// <param name="ref">Источник опорного напряжения:0 - внешний ИОН, 1 - внутренний ИОН 5В, 
/// 3 - внутренний ИОН 2.56В</param>
/// <param name="prescaler">Предделитель тактовой частоты: деление частоты на 2, 4 ,
///  8 , 16 , 32, 64 или 128</param>
/// <returns></returns>
extern void ADC_Init(uint8_t ref, uint8_t adcChannel, uint8_t prescaler);
//-------------------------------------------------------------------------------------
/// <summary>
/// Функция установки предделителя частоты АЦП
/// </summary>
/// <param name="divider">деление частоты на 2, 4 , 8 , 16 , 32, 64 или 128</param>
/// <returns></returns>
void ADC_SetPrescaler(uint8_t divider);
//-------------------------------------------------------------------------------------
/// <summary>
/// Функция выбора канала АЦП
/// </summary>
/// <param name="chIndex">номер канала от 0 до 7</param>
/// <returns></returns>
void ADC_SetChannel(uint8_t chIndex);
//-------------------------------------------------------------------------------------
/// <summary>
/// Функция выбора источника опорного напряжения
/// </summary>
/// <param name="voltRef">0 - внешний ИОН, 1 - внутренний ИОН 5В, 3 - внутренний ИОН 2.56В</param>
/// <returns></returns>
void ADC_SetVoltageReference(uint8_t voltRef);
//-------------------------------------------------------------------------------------
/// <summary>
/// Функция возврата результата АЦП
/// </summary>
/// <returns>Результат АЦП</returns>
extern uint16_t ADC_GetAdcResult(void);
//-------------------------------------------------------------------------------------
/// <summary>
/// Функция предназначена для внесения поправки в результат 
/// АЦП в связи с ошибкой преобразования.(Cодержит задержку 125 мкс)
/// </summary>
/// <param name="data">Результат преобразования</param>
/// <returns>Истинное значение результата преобразования</returns>
extern uint16_t ADC_CorrectAdcResult(uint16_t data);
//-------------------------------------------------------------------------------------

#endif